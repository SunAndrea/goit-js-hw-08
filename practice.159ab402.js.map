{"mappings":"YAiCA,SAASA,EAAoBC,GAC3B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,QAAQC,IAAI,qBAA8BC,OAATN,IACjCO,YAAW,WAOPJ,EAAO,Q,GAER,I,IAGPC,QAAQC,IAAIN,EAAqB,WACjCA,EAAqB,UAClBS,MAAK,SAAAC,GACJL,QAAQC,IAAII,GACZL,QAAQC,IAAIN,EAAqB,U,IAElCW,OAAM,SAAAC,GACLP,QAAQC,IAAIM,E","sources":["src/js/practice.js"],"sourcesContent":["// Перепешіть функцію fetchUserFromServer з колбеками таким чином, щоб вона не приймала колбеки, а повертала проміс\n\n// Зараз функція fetchUserFromServer() знає занадто багато про той код, який буде використовувати результат її роботи.\n//  Вона очікує колбеки і відповідає за їх виклик за певних умов.Тобто ми передаємо щось всередину функції(колбеки) і\n// сподіваємося, що воно відпрацює правильно - це недобре.\n\n// Краще, якщо функція не зважає на той код, який буде використовувати її результат. Вона просто виконує якусь операцію\n// і повертає результат своєї роботи у зовнішній код.Для того щоб повернути результат асинхронної операції, з функції необхідно повернути проміс.\n// const fetchUserFromServer = (username, onSuccess, onError) => {\n//   console.log(`Fetching data for ${username}`);\n\n//   setTimeout(() => {\n//     // Change value of isSuccess variable to simulate request status\n//     const isSuccess = true;\n\n//     if (isSuccess) {\n//       onSuccess('success value');\n//     } else {\n//       onError('error');\n//     }\n//   }, 2000);\n// };\n\n// const onFetchSuccess = user => {\n//   console.log(user);\n// };\n\n// const onFetchError = error => {\n//   console.error(error);\n// };\n\n// fetchUserFromServer('Mango', onFetchSuccess, onFetchError);\n\nfunction fetchUserFromServer(username) {\n  return new Promise((resolve, reject) => {\n    console.log(`Fetching data for ${username}`);\n    setTimeout(() => {\n      // Change value of isSuccess variable to simulate request status\n      const isSuccess = false;\n\n      if (isSuccess) {\n        resolve('success value');\n      } else {\n        reject('error');\n      }\n    }, 2000);\n  });\n}\nconsole.log(fetchUserFromServer(`Andrii`));\nfetchUserFromServer(`Andrii`)\n  .then(res => {\n    console.log(res);\n    console.log(fetchUserFromServer(`Andrii`));\n  })\n  .catch(rej => {\n    console.log(rej);\n  });\n//-------------------------------------------------------------------------//\n// console.log('start');\n\n// const promise1 = Promise.resolve().then(() => {\n//   console.log('promise1');\n//   const timer2 = setTimeout(() => {\n//     console.log('timer2');\n//   }, 0);\n// });\n\n// const timer1 = setTimeout(() => {\n//   console.log('timer1');\n//   const promise2 = Promise.resolve().then(() => {\n//     console.log('promise2');\n//   });\n// }, 0);\n\n// console.log('end');\n//-------------------------------------------------------------------------//\n// console.log('start');\n\n// const promise1 = Promise.resolve().then(() => {\n//   console.log('promise1');\n//   const timer2 = setTimeout(() => {\n//     console.log('timer2');\n//   }, 0);\n// });\n\n// const timer1 = setTimeout(() => {\n//   console.log('timer1');\n//   const promise2 = Promise.resolve().then(() => {\n//     console.log('promise2');\n//   });\n// }, 0);\n\n// console.log('end');\n// setTimeout(() => {\n//   console.log('timer3');\n// }, 0);\n\n// setTimeout(() => {\n//   console.log('timer4');\n// }, 0);\n"],"names":["$10b1660996c0b5c1$var$fetchUserFromServer","username","Promise","resolve","reject","console","log","concat","setTimeout","then","res","catch","rej"],"version":3,"file":"practice.159ab402.js.map"}